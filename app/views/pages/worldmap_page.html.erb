<html>
<head>
  <style>

    *{
      margin-top: 0;
      margin-left: 0;
      margin-right: 0;
      padding-right: 0;
      padding-left: 0;
      padding-top: 0;

    }



    #menuLink *{
      text-decoration: none;
      color: white;
      line-height: 2.0em;
      font-size: 1.6em ;
      font-family: "Segoe UI Light";
    }

    .myTest{
      max-height : 25em;
      overflow: auto;
    }

    /*unerlässlich*/
    #map {
      height: 100%;

    }

    #infowindow-content .title {
      font-weight: bold;
    }

    #infowindow-content {
      font-family: "Segoe UI Light";
      display: none;
    }

    #map #infowindow-content {
      display: inline;
    }


    .pac-controls label {
      font-family: "Segoe UI Light";
      font-size: 13px;
      font-weight: 300;
    }

    #pac-input {
      margin-left: -2%;
      margin-right: 1.5%;
      background-color: #fff;
      font-family: "Segoe UI Light";
      font-size: 17px;
      font-weight: 300;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;
      width: 400px;
      border-radius: 30px;
      border-style: solid;
      border-color: white;
      z-index: 4;
    }

    #pac-input:focus {
      border-color: white;
      border-radius: 10px;
      border-style: solid;
    }


    #oberesSuchfeld{
      padding-top: 0.25%;
      padding-bottom: 0.25%;
      padding-left: 1%;
      padding-right: 1%;
      border-radius: 0% 0% 20px 20px;
      position: fixed;
      font-family: "Segoe UI Light" !important;
      width: 65%;
      top: 0%;
      margin-left: 16%;
      height: 3%;
      color: #ffffff;
      text-align: center; font-style: normal; font-size: 14.5pt;
      background: rgba(0,0,0, .6);
      z-index: 3;
    }

    #pac-input2{
      margin-left: 1.5%;
      background-color: #fff;
      font-family: "Segoe UI Light";
      font-size: 17px;
      font-weight: 300;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;

      border-radius: 30px;
      border-style: solid;
      border-color: white;
      z-index: 4;
    }

    #arztcombo{
      margin-left: 1.5%;
      background-color: #fff;
      font-family: "Segoe UI Light";
      font-size: 17px;
      font-weight: 300;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;

      border-radius: 30px;
      border-style: solid;
      border-color: white;
      z-index: 4;
    }

    #rButton1{
      margin-left: 1.5%;
    }

  </style>

</head>

<div class="image-container" xmlns="http://www.w3.org/1999/html">
  <%= image_tag "backgroundAfterLogin.jpg" , size: "2048x1080"  %>

</div>


<div id="MapFenster">

  <div id="oberesSuchfeld">
    <input id="pac-input" class="controls" type="text"
           placeholder="Zieleingabe">

    <input id="rButton" type="radio" name="hospital" value="Krankenhaus"> Krankenhaus
    <input id="rButton1" type="radio" name="aerzte" value="Ärzte"> Arzt

    <select id="arztcombo">
      <option value = null selected></option>
      <option value="Alle Fachrichtungen">Alle Fachrichtungen</option>
      <option value="Allgemeinmedizin">Allgemeinmedizin</option>
      <option value="Anästhesiologie">Anästhesiologie</option>
      <option value="Augenheilkunde">Augenheilkunde</option>
      <option value="Chirurgie">Chirurgie</option>
      <option value="Frauenheilkunde & Geburtshilfe">Frauenheilkunde & Geburtshilfe</option>
      <option value="Hals-Nasen-Ohrenheilkunde">Hals-Nasen-Ohrenheilkunde</option>
      <option value="Haut- & Geschlechtskrankheiten">Haut- & Geschlechtskrankheiten</option>
      <option value="Humangenetik">Humangenetik</option>
      <option value="Innere Medizin">Innere Medizin</option>
      <option value="Kinder- & Jugendpsychotherapie">Kinder- & Jugendpsychotherapie</option>
      <option value="Kinder- & Jugendpsychatrie">Kinder- & Jugendpsychatrie</option>
      <option value="Kinderheilkunde">Kinderheilkunde</option>
      <option value="Laboratoriumsmedizin">Laboratoriumsmedizin</option>
      <option value="Logopädie">Logopädie</option>
      <option value="Mikrobiologie und Infektionsepidemiologie">Mikrobiologie und Infektionsepidemiologie</option>
      <option value="Mund-Kiefer-Gesichtschirurgie">Mund-Kiefer-Gesichtschirugie</option>
      <option value="Nervenheilkunde / Neurologie">Nervenheilkunde / Neurologie</option>
      <option value="Neurochirurgie">Neurochirurgie</option>
      <option value="Nuklearmedizin">Nuklearmedizin</option>
      <option value="Orthopädie">Orthopädie</option>
      <option value="Phoniatrie / Pädaudologie">Phoniatrie / Pädaudologie</option>
      <option value="Physikalische & Rehabilitative Medizin">Physikalische & Rehabilitative Medizin</option>
      <option value="Psychatrie">Psychatrie</option>
      <option value="Psychologische Psychotherapie">Psychologische Psychotherapie</option>
      <option value="Psychosomatische Medizin">Psychosomatische Medizin</option>
      <option value="Radiologie">Radiologie</option>
      <option value="Urologie">Urologie</option>
      <option value="Zahnärzte">Zahnärzte</option>
    </select>

    <select id="pac-input2" >
      <option value = null selected> beliebig</option>
      <option value=0.5> 0.5 km</option>
      <option value=0.75> 0.75 km</option>
      <option value=1> 1 km </option>
      <option value=1.5> 1.5 km</option>
      <option value=2> 2 km</option>
      <option value=3> 3 km</option>
      <option value=4> 4 km</option>
      <option value=5> 5 km</option>
      <option value=7.5> 7.5 km</option>
      <option value=10> 10 km</option>
      <option value=15> 15 km</option>
      <option value=20> 20 km</option>
      <option value=25> 25 km</option>
      <option value=30> 30 km</option>
      <option value=35> 35 km</option>
      <option value=40> 40 km</option>
      <option value=45> 45 km</option>
      <option value=50> 50 km</option>
      <option value=75> 75 km</option>
      <option value=100> 100 km</option>
    </select>


    <div class="slidecontainer">
      <input id="mortalitaet" type="range" value="0" min="0" max="100">
    </div>

  </div>

  <div id="map"></div>
  <div id="infowindow-content">
    <span id="place-name"  class="title"></span><br>
    Place ID <span id="place-id"></span><br>
    <span id="place-address"></span>
  </div>




  <script>
      // This sample uses the Place Autocomplete widget requesting only a place
      // ID to allow the user to search for and locate a place. The sample
      // then reverse geocodes the place ID and displays an info window
      // containing the place ID and other information about the place that the
      // user has selected.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBZLMhUcGgyrPcMynUS21Tq4IdYXTRJXeY&libraries=geometry,places,visualization";
      src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js";
      src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/infobubble/src/infobubble.js";
      src="https://www.gstatic.com/charts/loader.js";
      src="http://www.google.com/jsapi";

      function initMap() {

          var map;

          if(new Date().getHours() > 6 && new Date().getHours() < 22) {

              map = new google.maps.Map(document.getElementById('map'), {
                  mapTypeControl: false,
                  zoom: 17,

              });
          }

          else {

              map = new google.maps.Map(document.getElementById('map'), {
                  mapTypeControl: false,
                  zoom: 17,
                  styles: [
                      {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
                      {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
                      {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
                      {
                          featureType: 'administrative.locality',
                          elementType: 'labels.text.fill',
                          stylers: [{color: '#d59563'}]
                      },
                      {
                          featureType: 'poi',
                          elementType: 'labels.text.fill',
                          stylers: [{color: '#d59563'}]
                      },
                      {
                          featureType: 'poi.park',
                          elementType: 'geometry',
                          stylers: [{color: '#263c3f'}]
                      },
                      {
                          featureType: 'poi.park',
                          elementType: 'labels.text.fill',
                          stylers: [{color: '#6b9a76'}]
                      },
                      {
                          featureType: 'road',
                          elementType: 'geometry',
                          stylers: [{color: '#38414e'}]
                      },
                      {
                          featureType: 'road',
                          elementType: 'geometry.stroke',
                          stylers: [{color: '#212a37'}]
                      },
                      {
                          featureType: 'road',
                          elementType: 'labels.text.fill',
                          stylers: [{color: '#9ca5b3'}]
                      },
                      {
                          featureType: 'road.highway',
                          elementType: 'geometry',
                          stylers: [{color: '#746855'}]
                      },
                      {
                          featureType: 'road.highway',
                          elementType: 'geometry.stroke',
                          stylers: [{color: '#1f2835'}]
                      },
                      {
                          featureType: 'road.highway',
                          elementType: 'labels.text.fill',
                          stylers: [{color: '#f3d19c'}]
                      },
                      {
                          featureType: 'transit',
                          elementType: 'geometry',
                          stylers: [{color: '#2f3948'}]
                      },
                      {
                          featureType: 'transit.station',
                          elementType: 'labels.text.fill',
                          stylers: [{color: '#d59563'}]
                      },
                      {
                          featureType: 'water',
                          elementType: 'geometry',
                          stylers: [{color: '#17263c'}]
                      },
                      {
                          featureType: 'water',
                          elementType: 'labels.text.fill',
                          stylers: [{color: '#515c6d'}]
                      },
                      {
                          featureType: 'water',
                          elementType: 'labels.text.stroke',
                          stylers: [{color: '#17263c'}]
                      }
                  ]
              });

          }

          //DEFAULT_POS: FIN-OVGU
          var personPos = {lat: 52.138718, lng: 11.645646};
          map.setCenter(personPos);

          var defaultPosition = new google.maps.Marker({
              position: personPos,
              title: 'DEFAULT-Position: FIN-Ovgu',
              map: map
          });


          if (navigator.geolocation) {


              navigator.geolocation.getCurrentPosition(function (position){

                  personPos = {
                          lat: position.coords.latitude,
                          lng: position.coords.longitude
                      };

                     defaultPosition.setMap(null);

                  map.setCenter(personPos);

                  defaultPosition = new google.maps.Marker({
                      position: personPos,
                      title: 'Sie sind hier',
                      map: map
                  });
              });

          }


          var input = document.getElementById('pac-input');

          var aTyp = document.getElementById('arztcombo');

          var distbox = document.getElementById("pac-input2");



          aTyp.addEventListener("change", suche);

          distbox.addEventListener("change", suche);

          var markers = [];

          // ertsellt Marker für jeden gewuenschten Arzt auf der Karte
          function suche() {


              if(markers.length > 0) {

                  for (var i = 0; i < markers.length; i++) {
                      markers[i].setMap(null);
                  }

                  markers = [];
              }

              
              function getDoctor(spec, dist) {

                    var distance = dist.value;
                    var special = spec.value;

                  if (special != 'null' && special !='Alle Fachrichtungen' && distance == 'null'){ typus = 1;}
                  else if(special == 'null' && distance != 'null' || special == 'Alle Fachrichtungen' && distance != 'null'){typus = 2;}
                  else if(special != 'null' && distance != 'null'){ typus = 3;}
                  else if(special == 'Alle Fachrichtungen' && distance == 'null'){ typus = 0;}
                  else typus = 1;



               return $.ajax({

                      type: "POST",
                      url: "/map_entries/search",
                      data: {search: {spec: special, dist: distance}, type: typus, coords: {x: personPos.lat, y: personPos.lng}},
                      success: function(data){


                          var rueckgabeTupel = [];
                          var  list = JSON.parse(data);


                          var createContent = function (coordinate, personalListed) {

                              var markerContent = [];
                              var markerString ="";



                              for (var human in personalListed) {

                                  var name = personalListed[human].name;
                                  var plz = personalListed[human].plz;
                                  var locat = personalListed[human].location;
                                  var ort = plz + " " + locat;
                                  var strasse = personalListed[human].street;
                                  var tel = personalListed[human].phone;
                                  var fachbereich = personalListed[human].spec;

                                  markerContent.push("<b><big> " + name + "</big></b></br></br> " + "<div align='center'> <img src='https://i.ibb.co/NtVCxDY/bildDoc.png'></div>" + "</br><b>Fachbereich:</b> " + fachbereich + "</br></br>" + "<b>Ort:</b> " + ort + " , " + strasse + "</br></br>" + "<b>Telefonnummer:</b> " + tel + "</br></br>");

                              }

                              if(markerContent.length > 1){
                                  for(var element of markerContent) {
                                      if (markerContent.indexOf(element) < markerContent.length - 1) {
                                          markerString += element + "</br></br>"
                                      }

                                      else markerString += element;


                                  }
                              }
                              else markerString = markerContent[0];

                              markerString = '<div class="myTest">' + markerString + '</div>';



                              rueckgabeTupel.push([coordinate, markerString]);
                          };


                          var doppeltePositionen = [];

                          var comparePos = function (coordinate) {


                              var exist = false;

                              for(var coord in doppeltePositionen){
                                  if(coordinate.equals(doppeltePositionen[coord])){
                                      exist = true;
                                      break;
                                  }
                              }

                              return exist;
                          };

                          for(var index=0; index < list.length; index++) {

                              var personenList = [];

                              var lat = list[index].lat;
                              var lng = list[index].lng;

                              var coordinateMain = new google.maps.LatLng(lat, lng);

                              if (doppeltePositionen.length < 1) {

                                  doppeltePositionen.push(coordinateMain);
                                  personenList.push(list[index]);

                                  for (var cIn = index; cIn < list.length; cIn++) {
                                      if(cIn + 1 < list.length ){
                                          if (comparePos(new google.maps.LatLng(list[cIn+1].lat, list[cIn+1].lng))) {
                                              personenList.push(list[cIn+1]);
                                          }
                                      }
                                  }

                                  createContent(coordinateMain, personenList);

                              }

                              else if (!comparePos(coordinateMain)) {

                                  personenList.push(list[index]);
                                  doppeltePositionen.push(coordinateMain);


                                  for (var c = index; c < list.length; c++) {
                                      if(c +1 < list.length) {
                                          if (comparePos(new google.maps.LatLng(list[c+1].lat, list[c+1].lng))) {
                                              personenList.push(list[c+1]);
                                          }
                                      }
                                  }

                                  createContent(coordinateMain, personenList);
                              }



                          }



                          for(var x in rueckgabeTupel){

                              createMarker(rueckgabeTupel[x][0] , rueckgabeTupel[x][1] );
                          }
                          return true;

                      },
                      error: function(data){
                          alert("An error occured while requesting the Data from the server.\n Error: " + data.message);
                          return false;
                      }
                  });

              }

              //ERSTELLE MARKER AUF DER MAP
              var createMarker = function(coordinate, markerContent){

                  var m = new google.maps.Marker({
                      map: map,
                      position: coordinate,
                      icon : 'https://i.ibb.co/SrJdfkt/doctor-icon.png'
                  });


                  markers.push(m);

                  google.maps.event.addListener(m, "click", function () {


                      var infowindow0 = new google.maps.InfoWindow();
                      infowindow0.setPosition(coordinate);
                      infowindow0.setContent(markerContent );
                      infowindow0.open(map, m);

                  });
              };

              getDoctor(aTyp, distbox);
        }


          var autocomplete = new google.maps.places.Autocomplete(
              input, {placeIdOnly: true});
          autocomplete.bindTo('bounds', map);

          var infowindow = new google.maps.InfoWindow();
          var infowindowContent = document.getElementById('infowindow-content');
          infowindow.setContent(infowindowContent);
          var geocoder = new google.maps.Geocoder;
          var marker = new google.maps.Marker({
              map: map
          });
          marker.addListener('click', function() {
              infowindow.open(map, marker);
          });

          autocomplete.addListener('place_changed', function() {
              infowindow.close();
              var place = autocomplete.getPlace();

              if (!place.place_id) {
                  return;
              }
              geocoder.geocode({'placeId': place.place_id}, function(results, status) {

                  if (status !== 'OK') {
                      window.alert('Geocoder failed due to: ' + status);
                      return;
                  }
                  map.setZoom(11);
                  map.setCenter(results[0].geometry.location);
                  // Set the position of the marker using the place ID and location.
                  marker.setPlace({
                      placeId: place.place_id,
                      location: results[0].geometry.location
                  });
                  marker.setVisible(true);
                  infowindowContent.children['place-name'].textContent = place.name;
                  infowindowContent.children['place-id'].textContent = place.place_id;
                  infowindowContent.children['place-address'].textContent =
                      results[0].formatted_address;
                  infowindow.open(map, marker);
              });
          });

          //Lade GEOJson

          var mortalitaetsSlider = document.getElementById('mortalitaet');

          var layer = new google.maps.FusionTablesLayer({});


          mortalitaetsSlider.addEventListener("input", showRegionMortalitaet);

          function showRegionMortalitaet() {

              var num = document.getElementById('mortalitaet').value;


              var where = "MORTALITY < " + num + " AND MORTALITY > 0";

              var newOverlay = new google.maps.FusionTablesLayer({
                  query: {
                      select: 'GEOMETRY',
                      from: '1K9H0Semwh8vEVR0-_hDGh7I3yWYHaNeSCP9p2VNs',
                      where: where

                  },
                  styles: [{
                      polygonOptions: {
                          fillColor: '',
                          fillOpacity: 0.0
                      }
                  }, {
                      where: 'MORTALITY > 0',
                      polygonOptions: {
                          fillColor: '#ffffff',
                          fillOpacity: 0.2
                      }
                  }]
              });

              layer.setMap(null);

              //neues Info-Fenster
              google.maps.event.addListener(newOverlay, 'click', function(e) {

                  // Change the content of the InfoWindow

                  e.infoWindowHtml = "<b><big> " + e.row['REGION'].value + ", " + e.row['COUNTRY'].value +
                      "</big></b></br></br> " + "<div align='center'> <img src='https://drive.google.com/uc?id=1rzKuYjtFi0zHBZFMPpXz9IAWE1UVDAh4'></div>" +
                      "</br><b>Amtssprache:</b> " + e.row['MAJOR_LANGUAGE'].value + "</br></br>"
                      + "<b>Einwohnerzahl:</b> " + e.row['POPULATION'].value + "</br></br>" + "<b>Krankheit:</b> "
                      + e.row['ILLNESS'].value + "</br></br>" + "<b>Mortalität:</b>" + e.row['MORTALITY'].value + " %" +
                      "</br></br>"
              });

              layer = newOverlay;


              layer.setMap(map);


              return $.ajax({

                  type: "POST",
                  url: "/provinces/index",
                  success: function(data){

                      alert(data);
                      var rueckgabeTupel = [];
                      var  list = JSON.parse(data);

                      return list;

                  },
                  error: function(data){
                      alert("An error occured while requesting the Data from the server.\n Error: " + data.message);
                      return false;
                  }
              });
          }

      }

  </script>
  <script src="https://maps.googleapis.com/maps/api/js?v=3.37&key=AIzaSyBZLMhUcGgyrPcMynUS21Tq4IdYXTRJXeY&libraries=places&callback=initMap"
          async defer></script>


  <%= render partial: 'pages/newsline'%>
  <%= render partial: 'pages/leftsidepart'%>







  <script>



    function hexFromMortality(mortality){

        var red = 255;
        var green = 5.1 * mortality;

        if(green <= 255){

            return hexFromRGB(red, green, 0);
        }

        else{

            return hexFromRGB(red - (green-255), 255, 0)
        }
    }


      function hexFromRGB(r, g, b) {
          var hex = [
              r.toString(16),
              g.toString(16),
              b.toString(16)
          ];
          $.each( hex, function( nr, val ) {
              if ( val.length === 1 ) {
                  hex[ nr ] = "0" + val;
              }
          });
          window.alert(hex.join( "" ).toUpperCase());
          return hex.join( "" ).toUpperCase();
      }

  </script>


</div>
</html>